#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application Flask - Agent de Maintenance Intelligente
"""

import subprocess
import sys
import os
import time
import requests
from pathlib import Path

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    try:
        import flask
        import requests
        print("‚úÖ Toutes les d√©pendances Flask sont install√©es")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Installez les d√©pendances avec: pip install -r requirements.txt")
        return False

def check_mcp_server():
    """V√©rifie que le serveur MCP est accessible"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur MCP accessible")
            return True
        else:
            print("‚ö†Ô∏è  Serveur MCP r√©pond mais avec un statut non-200")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå Serveur MCP non accessible")
        print("   Assurez-vous que le serveur MCP est d√©marr√© sur le port 8001")
        return False

def check_sap_pm_server():
    """V√©rifie que le serveur SAP PM est accessible"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur SAP PM accessible")
            return True
        else:
            print("‚ö†Ô∏è  Serveur SAP PM r√©pond mais avec un statut non-200")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå Serveur SAP PM non accessible")
        print("   Assurez-vous que le serveur SAP PM est d√©marr√© sur le port 8000")
        return False

def start_flask_app():
    """D√©marre l'application Flask"""
    print("üöÄ D√©marrage de l'application Flask...")
    try:
        process = subprocess.Popen([
            sys.executable, "app.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        print(f"‚úÖ Application Flask d√©marr√©e (PID: {process.pid})")
        return process
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage de l'application Flask: {e}")
        return None

def main():
    """Fonction principale"""
    print("=" * 60)
    print("ü§ñ AGENT DE MAINTENANCE INTELLIGENTE - APPLICATION FLASK")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if not check_dependencies():
        sys.exit(1)
    
    print("\nüîç V√©rification des serveurs...")
    
    # V√©rifier les serveurs (optionnel)
    mcp_ok = check_mcp_server()
    sap_pm_ok = check_sap_pm_server()
    
    if not mcp_ok or not sap_pm_ok:
        print("\n‚ö†Ô∏è  ATTENTION: Certains serveurs ne sont pas accessibles")
        print("   L'application Flask peut fonctionner mais avec des limitations")
        print("   Pour une exp√©rience compl√®te, d√©marrez d'abord les serveurs:")
        print("   python start_servers.py")
        
        response = input("\nVoulez-vous continuer quand m√™me ? (y/n): ")
        if response.lower() != 'y':
            print("Arr√™t du d√©marrage")
            sys.exit(0)
    
    # D√©marrer l'application Flask
    flask_process = start_flask_app()
    if not flask_process:
        print("‚ùå Impossible de d√©marrer l'application Flask")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ APPLICATION FLASK D√âMARR√âE AVEC SUCC√àS!")
    print("=" * 60)
    print("üìä URLs d'acc√®s:")
    print("   ‚Ä¢ Application Flask: http://localhost:5000")
    print("   ‚Ä¢ Interface de chat: http://localhost:5000")
    print("   ‚Ä¢ API Flask: http://localhost:5000/api/")
    print("\nüí° Fonctionnalit√©s:")
    print("   ‚Ä¢ Interface de chat intuitive")
    print("   ‚Ä¢ Questions en langage naturel")
    print("   ‚Ä¢ Formatage automatique des r√©ponses")
    print("   ‚Ä¢ Indicateurs de statut en temps r√©el")
    print("   ‚Ä¢ Exemples de questions int√©gr√©s")
    print("\n‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter l'application")
    print("=" * 60)
    
    try:
        # Attendre que le processus se termine
        flask_process.wait()
    except KeyboardInterrupt:
        print("\nüõë Arr√™t de l'application Flask...")
        flask_process.terminate()
        print("‚úÖ Application Flask arr√™t√©e")

if __name__ == "__main__":
    main() 