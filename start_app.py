#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application Flask avec MCP + ChatGPT-4
"""

import os
import sys
import subprocess
import time
import requests
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def check_openai_config():
    """V√©rifie la configuration OpenAI"""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå **ERREUR**: OPENAI_API_KEY non configur√©e")
        print("   Ajoutez votre cl√© API OpenAI dans le fichier .env")
        return False
    
    if api_key == "your-openai-api-key-here":
        print("‚ùå **ERREUR**: OPENAI_API_KEY n'est pas configur√©e")
        print("   Remplacez 'your-openai-api-key-here' par votre vraie cl√© API")
        return False
    
    print("‚úÖ Configuration OpenAI OK")
    return True

def check_sap_pm_server():
    """V√©rifie si le serveur SAP PM est accessible"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur SAP PM accessible")
            return True
        else:
            print("‚ùå Serveur SAP PM non accessible")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå Serveur SAP PM non accessible")
        print("   Assurez-vous que le serveur SAP PM est d√©marr√© sur le port 8000")
        return False

def check_mcp_server():
    """V√©rifie si le serveur MCP est accessible"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur MCP accessible")
            return True
        else:
            print("‚ùå Serveur MCP non accessible")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå Serveur MCP non accessible")
        print("   Assurez-vous que le serveur MCP est d√©marr√© sur le port 8001")
        return False

def start_sap_pm_server():
    """D√©marre le serveur SAP PM"""
    print("üöÄ D√©marrage du serveur SAP PM...")
    
    sap_pm_dir = "SAP PM"
    if not os.path.exists(sap_pm_dir):
        print(f"‚ùå R√©pertoire {sap_pm_dir} non trouv√©")
        return False
    
    try:
        # Changer vers le r√©pertoire SAP PM
        os.chdir(sap_pm_dir)
        
        # D√©marrer le serveur
        process = subprocess.Popen(
            [sys.executable, "main.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Revenir au r√©pertoire parent
        os.chdir("..")
        
        # Attendre un peu pour que le serveur d√©marre
        time.sleep(3)
        
        # V√©rifier si le serveur r√©pond
        if check_sap_pm_server():
            print("‚úÖ Serveur SAP PM d√©marr√© avec succ√®s")
            return True
        else:
            print("‚ùå √âchec du d√©marrage du serveur SAP PM")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du serveur SAP PM: {str(e)}")
        return False

def start_mcp_server():
    """D√©marre le serveur MCP"""
    print("üöÄ D√©marrage du serveur MCP...")
    
    if not os.path.exists("main_mcp.py"):
        print("‚ùå Fichier main_mcp.py non trouv√©")
        return False
    
    try:
        # D√©marrer le serveur MCP
        process = subprocess.Popen(
            [sys.executable, "main_mcp.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Attendre un peu pour que le serveur d√©marre
        time.sleep(3)
        
        # V√©rifier si le serveur r√©pond
        if check_mcp_server():
            print("‚úÖ Serveur MCP d√©marr√© avec succ√®s")
            return True
        else:
            print("‚ùå √âchec du d√©marrage du serveur MCP")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du serveur MCP: {str(e)}")
        return False

def start_flask_app():
    """D√©marre l'application Flask"""
    print("üöÄ D√©marrage de l'application Flask avec MCP + ChatGPT-4...")
    
    try:
        # D√©marrer l'application Flask
        process = subprocess.Popen(
            [sys.executable, "app.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        print("‚úÖ Application Flask d√©marr√©e")
        print("üåê Application disponible sur: http://localhost:5000")
        print("ü§ñ MCP + ChatGPT-4 int√©gr√©s et pr√™ts √† l'utilisation")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage de Flask: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("ü§ñ **Agent de Maintenance Intelligente avec MCP + ChatGPT-4**")
    print("=" * 70)
    
    # V√©rifier la configuration OpenAI
    if not check_openai_config():
        return
    
    # V√©rifier le serveur SAP PM
    if not check_sap_pm_server():
        print("\nüîÑ Tentative de d√©marrage du serveur SAP PM...")
        if not start_sap_pm_server():
            print("‚ùå Impossible de d√©marrer le serveur SAP PM")
            print("   V√©rifiez que le r√©pertoire 'SAP PM' existe et contient main.py")
            return
    
    # V√©rifier le serveur MCP
    if not check_mcp_server():
        print("\nüîÑ Tentative de d√©marrage du serveur MCP...")
        if not start_mcp_server():
            print("‚ùå Impossible de d√©marrer le serveur MCP")
            print("   V√©rifiez que le fichier main_mcp.py existe")
            return
    
    # D√©marrer l'application Flask
    print("\nüöÄ D√©marrage de l'application...")
    if start_flask_app():
        print("\nüéâ **Application pr√™te !**")
        print("   - Interface web: http://localhost:5000")
        print("   - Serveur MCP: http://localhost:8001")
        print("   - Serveur SAP PM: http://localhost:8000")
        print("   - ChatGPT-4: Int√©gr√© et fonctionnel")
        print("\nüí° Exemples de questions:")
        print("   ‚Ä¢ 'Salut, comment √ßa va ?' (ChatGPT-4)")
        print("   ‚Ä¢ 'Donne-moi tous les √©quipements' (MCP)")
        print("   ‚Ä¢ 'Explique-moi la maintenance pr√©ventive' (ChatGPT-4)")
        print("   ‚Ä¢ 'Montre-moi les ordres de maintenance ouverts' (MCP)")
    else:
        print("‚ùå √âchec du d√©marrage de l'application")

if __name__ == "__main__":
    main() 