"""
Outils SAP PM pour l'ADK (Agent Development Kit)
Transforme les fonctions du client SAP PM en outils utilisables par les agents
"""

import asyncio
from typing import Dict, Any, List, Optional
from adk.api.tool_manager import tool
from sap_pm_client import SAPPMClient

# Initialisation du client SAP PM
sap_client = SAPPMClient()

@tool
async def create_sap_work_order(
    description: str,
    equipment_id: str,
    priority: str = "MEDIUM",
    order_type: str = "PM01",
    work_center_id: str = None,
    planned_start_date: str = None,
    planned_end_date: str = None,
    estimated_hours: float = None
) -> str:
    """
    Cr√©e un ordre de travail dans SAP PM.
    Utilisez cet outil lorsque vous devez cr√©er une nouvelle t√¢che de maintenance.

    Args:
        description: Une description d√©taill√©e du travail √† effectuer
        equipment_id: L'ID de l'√©quipement concern√©
        priority: La priorit√© de l'ordre (LOW, MEDIUM, HIGH, CRITICAL)
        order_type: Type d'ordre (PM01 pour maintenance pr√©ventive, PM02 pour corrective)
        work_center_id: ID du centre de travail responsable
        planned_start_date: Date de d√©but pr√©vue (format: YYYY-MM-DD)
        planned_end_date: Date de fin pr√©vue (format: YYYY-MM-DD)
        estimated_hours: Nombre d'heures estim√©es

    Returns:
        Une cha√Æne de caract√®res confirmant la cr√©ation et l'ID du nouvel ordre
    """
    try:
        order_data = {
            "equipment_id": equipment_id,
            "description": description,
            "order_type": order_type,
            "priority": priority
        }
        
        if work_center_id:
            order_data["work_center_id"] = work_center_id
        if planned_start_date:
            order_data["planned_start_date"] = planned_start_date
        if planned_end_date:
            order_data["planned_end_date"] = planned_end_date
        if estimated_hours:
            order_data["estimated_hours"] = estimated_hours

        result = await sap_client.create_order(order_data)
        
        if result and result.get('id'):
            return f"‚úÖ Ordre de travail cr√©√© avec succ√®s. ID: {result['id']}, Description: {description}"
        else:
            return f"‚ùå Erreur lors de la cr√©ation de l'ordre de travail: Aucun ID retourn√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la cr√©ation de l'ordre de travail: {str(e)}"

@tool
async def create_sap_notification(
    equipment_id: str,
    short_text: str,
    long_text: str = "",
    priority: str = "MEDIUM",
    functional_location_id: str = None
) -> str:
    """
    Cr√©e une notification de maintenance dans SAP PM.

    Args:
        equipment_id: L'ID de l'√©quipement concern√©
        short_text: Texte court de la notification
        long_text: Description d√©taill√©e (optionnel)
        priority: Priorit√© de la notification (LOW, MEDIUM, HIGH, CRITICAL)
        functional_location_id: ID de l'emplacement fonctionnel (optionnel)

    Returns:
        Confirmation de cr√©ation avec l'ID de la notification
    """
    try:
        notification_data = {
            "equipment_id": equipment_id,
            "short_text": short_text,
            "long_text": long_text,
            "priority": priority
        }
        
        if functional_location_id:
            notification_data["functional_location_id"] = functional_location_id

        result = await sap_client.create_notification(notification_data)
        
        if result and result.get('id'):
            return f"‚úÖ Notification cr√©√©e avec succ√®s. ID: {result['id']}, Texte: {short_text}"
        else:
            return f"‚ùå Erreur lors de la cr√©ation de la notification: Aucun ID retourn√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la cr√©ation de la notification: {str(e)}"

@tool
async def get_equipment_details(equipment_id: str) -> str:
    """
    R√©cup√®re les d√©tails d'un √©quipement sp√©cifique depuis SAP.

    Args:
        equipment_id: L'ID technique de l'√©quipement √† rechercher

    Returns:
        Une cha√Æne format√©e avec les d√©tails de l'√©quipement
    """
    try:
        details = await sap_client.get_equipment_by_id(equipment_id)
        
        if details:
            return f"üìã D√©tails pour l'√©quipement {equipment_id}:\n" + \
                   f"   Nom: {details.get('name', 'N/A')}\n" + \
                   f"   Type: {details.get('equipment_type', 'N/A')}\n" + \
                   f"   Statut: {details.get('status', 'N/A')}\n" + \
                   f"   Emplacement: {details.get('functional_location_id', 'N/A')}\n" + \
                   f"   Centre de travail: {details.get('work_center_id', 'N/A')}"
        else:
            return f"‚ùå √âquipement {equipment_id} non trouv√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration de l'√©quipement: {str(e)}"

@tool
async def get_open_work_orders(
    status: str = "OPEN",
    priority: str = None,
    equipment_id: str = None,
    work_center_id: str = None
) -> str:
    """
    R√©cup√®re les ordres de travail ouverts depuis SAP PM.

    Args:
        status: Statut des ordres √† r√©cup√©rer (OPEN, CLOSED, IN_PROGRESS)
        priority: Filtrer par priorit√© (LOW, MEDIUM, HIGH, CRITICAL)
        equipment_id: Filtrer par √©quipement
        work_center_id: Filtrer par centre de travail

    Returns:
        Liste format√©e des ordres de travail
    """
    try:
        params = {"status": status}
        if priority:
            params["priority"] = priority
        if equipment_id:
            params["equipment_id"] = equipment_id
        if work_center_id:
            params["work_center_id"] = work_center_id

        orders = await sap_client.get_open_orders(**params)
        
        if orders:
            result = f"üìã {len(orders)} ordre(s) de travail trouv√©(s):\n"
            for order in orders[:10]:  # Limiter √† 10 pour la lisibilit√©
                result += f"   ‚Ä¢ ID: {order.get('id', 'N/A')} - {order.get('description', 'N/A')} " + \
                         f"(Priorit√©: {order.get('priority', 'N/A')})\n"
            
            if len(orders) > 10:
                result += f"   ... et {len(orders) - 10} autres ordres"
            
            return result
        else:
            return f"üì≠ Aucun ordre de travail trouv√© avec les crit√®res sp√©cifi√©s"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des ordres: {str(e)}"

@tool
async def get_equipment_list(
    functional_location_id: str = None,
    equipment_type: str = None,
    status: str = None
) -> str:
    """
    R√©cup√®re la liste des √©quipements depuis SAP PM.

    Args:
        functional_location_id: Filtrer par emplacement fonctionnel
        equipment_type: Filtrer par type d'√©quipement
        status: Filtrer par statut

    Returns:
        Liste format√©e des √©quipements
    """
    try:
        params = {}
        if functional_location_id:
            params["functional_location_id"] = functional_location_id
        if equipment_type:
            params["equipment_type"] = equipment_type
        if status:
            params["status"] = status

        equipment_list = await sap_client.get_equipment_list(**params)
        
        if equipment_list:
            result = f"üìã {len(equipment_list)} √©quipement(s) trouv√©(s):\n"
            for equipment in equipment_list[:10]:  # Limiter √† 10
                result += f"   ‚Ä¢ {equipment.get('id', 'N/A')} - {equipment.get('name', 'N/A')} " + \
                         f"({equipment.get('equipment_type', 'N/A')})\n"
            
            if len(equipment_list) > 10:
                result += f"   ... et {len(equipment_list) - 10} autres √©quipements"
            
            return result
        else:
            return f"üì≠ Aucun √©quipement trouv√© avec les crit√®res sp√©cifi√©s"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des √©quipements: {str(e)}"

@tool
async def get_notifications(
    status: str = None,
    priority: str = None,
    equipment_id: str = None,
    functional_location_id: str = None
) -> str:
    """
    R√©cup√®re les notifications de maintenance depuis SAP PM.

    Args:
        status: Filtrer par statut
        priority: Filtrer par priorit√©
        equipment_id: Filtrer par √©quipement
        functional_location_id: Filtrer par emplacement fonctionnel

    Returns:
        Liste format√©e des notifications
    """
    try:
        params = {}
        if status:
            params["status"] = status
        if priority:
            params["priority"] = priority
        if equipment_id:
            params["equipment_id"] = equipment_id
        if functional_location_id:
            params["functional_location_id"] = functional_location_id

        notifications = await sap_client.get_notifications(**params)
        
        if notifications:
            result = f"üìã {len(notifications)} notification(s) trouv√©e(s):\n"
            for notification in notifications[:10]:
                result += f"   ‚Ä¢ ID: {notification.get('id', 'N/A')} - {notification.get('short_text', 'N/A')} " + \
                         f"(Priorit√©: {notification.get('priority', 'N/A')})\n"
            
            if len(notifications) > 10:
                result += f"   ... et {len(notifications) - 10} autres notifications"
            
            return result
        else:
            return f"üì≠ Aucune notification trouv√©e avec les crit√®res sp√©cifi√©s"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des notifications: {str(e)}"

@tool
async def get_work_centers(
    hierarchy_id: str = None,
    cost_center: str = None
) -> str:
    """
    R√©cup√®re les centres de travail depuis SAP PM.

    Args:
        hierarchy_id: Filtrer par hi√©rarchie
        cost_center: Filtrer par centre de co√ªt

    Returns:
        Liste format√©e des centres de travail
    """
    try:
        params = {}
        if hierarchy_id:
            params["hierarchy_id"] = hierarchy_id
        if cost_center:
            params["cost_center"] = cost_center

        work_centers = await sap_client.get_work_centers(**params)
        
        if work_centers:
            result = f"üìã {len(work_centers)} centre(s) de travail trouv√©(s):\n"
            for wc in work_centers[:10]:
                result += f"   ‚Ä¢ {wc.get('id', 'N/A')} - {wc.get('name', 'N/A')} " + \
                         f"(Centre de co√ªt: {wc.get('cost_center', 'N/A')})\n"
            
            if len(work_centers) > 10:
                result += f"   ... et {len(work_centers) - 10} autres centres"
            
            return result
        else:
            return f"üì≠ Aucun centre de travail trouv√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des centres de travail: {str(e)}"

@tool
async def get_functional_locations(
    hierarchy_id: str = None,
    equipment_id: str = None
) -> str:
    """
    R√©cup√®re les emplacements fonctionnels depuis SAP PM.

    Args:
        hierarchy_id: Filtrer par hi√©rarchie
        equipment_id: Filtrer par √©quipement

    Returns:
        Liste format√©e des emplacements fonctionnels
    """
    try:
        params = {}
        if hierarchy_id:
            params["hierarchy_id"] = hierarchy_id
        if equipment_id:
            params["equipment_id"] = equipment_id

        locations = await sap_client.get_functional_locations(**params)
        
        if locations:
            result = f"üìã {len(locations)} emplacement(s) fonctionnel(s) trouv√©(s):\n"
            for loc in locations[:10]:
                result += f"   ‚Ä¢ {loc.get('id', 'N/A')} - {loc.get('name', 'N/A')} " + \
                         f"(Hi√©rarchie: {loc.get('hierarchy_id', 'N/A')})\n"
            
            if len(locations) > 10:
                result += f"   ... et {len(locations) - 10} autres emplacements"
            
            return result
        else:
            return f"üì≠ Aucun emplacement fonctionnel trouv√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des emplacements fonctionnels: {str(e)}"

@tool
async def get_materials(
    material_type: str = None,
    status: str = None
) -> str:
    """
    R√©cup√®re les mat√©riaux depuis SAP PM.

    Args:
        material_type: Filtrer par type de mat√©riau
        status: Filtrer par statut

    Returns:
        Liste format√©e des mat√©riaux
    """
    try:
        params = {}
        if material_type:
            params["material_type"] = material_type
        if status:
            params["status"] = status

        materials = await sap_client.get_materials(**params)
        
        if materials:
            result = f"üìã {len(materials)} mat√©riau(x) trouv√©(s):\n"
            for material in materials[:10]:
                result += f"   ‚Ä¢ {material.get('id', 'N/A')} - {material.get('name', 'N/A')} " + \
                         f"(Type: {material.get('material_type', 'N/A')})\n"
            
            if len(materials) > 10:
                result += f"   ... et {len(materials) - 10} autres mat√©riaux"
            
            return result
        else:
            return f"üì≠ Aucun mat√©riau trouv√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des mat√©riaux: {str(e)}"

@tool
async def get_maintenance_strategies(
    equipment_id: str = None,
    strategy_type: str = None
) -> str:
    """
    R√©cup√®re les strat√©gies de maintenance depuis SAP PM.

    Args:
        equipment_id: Filtrer par √©quipement
        strategy_type: Filtrer par type de strat√©gie

    Returns:
        Liste format√©e des strat√©gies de maintenance
    """
    try:
        params = {}
        if equipment_id:
            params["equipment_id"] = equipment_id
        if strategy_type:
            params["strategy_type"] = strategy_type

        strategies = await sap_client.get_maintenance_strategies(**params)
        
        if strategies:
            result = f"üìã {len(strategies)} strat√©gie(s) de maintenance trouv√©e(s):\n"
            for strategy in strategies[:10]:
                result += f"   ‚Ä¢ {strategy.get('id', 'N/A')} - {strategy.get('name', 'N/A')} " + \
                         f"(Type: {strategy.get('strategy_type', 'N/A')})\n"
            
            if len(strategies) > 10:
                result += f"   ... et {len(strategies) - 10} autres strat√©gies"
            
            return result
        else:
            return f"üì≠ Aucune strat√©gie de maintenance trouv√©e"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des strat√©gies: {str(e)}"

@tool
async def get_catalogs(
    code_group: str = None,
    code: str = None
) -> str:
    """
    R√©cup√®re les catalogues depuis SAP PM.

    Args:
        code_group: Filtrer par groupe de codes
        code: Filtrer par code sp√©cifique

    Returns:
        Liste format√©e des catalogues
    """
    try:
        params = {}
        if code_group:
            params["code_group"] = code_group
        if code:
            params["code"] = code

        catalogs = await sap_client.get_catalogs(**params)
        
        if catalogs:
            result = f"üìã {len(catalogs)} catalogue(s) trouv√©(s):\n"
            for catalog in catalogs[:10]:
                result += f"   ‚Ä¢ {catalog.get('id', 'N/A')} - {catalog.get('name', 'N/A')} " + \
                         f"(Groupe: {catalog.get('code_group', 'N/A')})\n"
            
            if len(catalogs) > 10:
                result += f"   ... et {len(catalogs) - 10} autres catalogues"
            
            return result
        else:
            return f"üì≠ Aucun catalogue trouv√©"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des catalogues: {str(e)}"

@tool
async def get_characteristics(
    name: str = None,
    unit_of_measurement: str = None
) -> str:
    """
    R√©cup√®re les caract√©ristiques depuis SAP PM.

    Args:
        name: Filtrer par nom
        unit_of_measurement: Filtrer par unit√© de mesure

    Returns:
        Liste format√©e des caract√©ristiques
    """
    try:
        params = {}
        if name:
            params["name"] = name
        if unit_of_measurement:
            params["unit_of_measurement"] = unit_of_measurement

        characteristics = await sap_client.get_characteristics(**params)
        
        if characteristics:
            result = f"üìã {len(characteristics)} caract√©ristique(s) trouv√©e(s):\n"
            for char in characteristics[:10]:
                result += f"   ‚Ä¢ {char.get('id', 'N/A')} - {char.get('name', 'N/A')} " + \
                         f"(Unit√©: {char.get('unit_of_measurement', 'N/A')})\n"
            
            if len(characteristics) > 10:
                result += f"   ... et {len(characteristics) - 10} autres caract√©ristiques"
            
            return result
        else:
            return f"üì≠ Aucune caract√©ristique trouv√©e"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des caract√©ristiques: {str(e)}" 